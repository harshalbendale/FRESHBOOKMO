<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="22e070ca-af88-4b36-9722-ba38289bb021" activeEnvironment="Default" name="freshbooks" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="8581c2f0-5cd9-4350-a4eb-69d8b8f0daa1" wadlVersion="http://wadl.dev.java.net/2009/02" name="FreshbooksAPI" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>freshbooks yml</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://HARSHALBENDALE.local:8089/</con:endpoint></con:endpoints><con:resource name="/accounting/account/{accountid}/estimates/estimates/{estimateid}" path="/accounting/account/{accountid}/estimates/estimates/{estimateid}" id="67290b89-3bfa-4192-b81d-65c2d594550b"><con:settings/><con:parameters/><con:method name="GET" id="fce7cb67-c79c-47bb-980e-f4d470b1cd9c" method="GET"><con:description>
Estimate information</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>accountid</con:name><con:style>QUERY</con:style><con:description>The external account number (int) or account ID Guid.</con:description></con:parameter><con:parameter required="true"><con:name>estimateid</con:name><con:style>TEMPLATE</con:style><con:description>The estimate's ID. Eg 3242 </con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:request name="get estimates" id="12ba4735-433a-4235-8de1-9937ed5ada6a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://HARSHALBENDALE.local:8089/</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="accountid" value="ao4ZZY"/>
  <con:entry key="estimateid" value="1276"/>
</con:parameters><con:parameterOrder><con:entry>accountid</con:entry><con:entry>estimateid</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/accounting/account/{accountid}/invoices/invoices/{invoiceid}" path="/accounting/account/{accountid}/invoices/invoices/{invoiceid}" id="a7e94a55-d8d6-48da-90c2-ee4f1bec22e6"><con:settings/><con:parameters/><con:method name="GET" id="af7ef053-4211-47c9-bc4e-1a47c30c7a3f" method="GET"><con:description>
Invoice information</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>accountid</con:name><con:style>TEMPLATE</con:style><con:description>The external account number (int) or account ID Guid.</con:description></con:parameter><con:parameter required="true"><con:name>invoiceid</con:name><con:style>TEMPLATE</con:style><con:description>The invoice's ID. Eg 16461 </con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="57c91490-c416-4718-b0bb-c9819ce3ea65" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://HARSHALBENDALE.local:8089/</con:endpoint><con:request/><con:originalUri>http://HARSHALBENDALE.local/accounting/account//invoices/invoices/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/accounting/account/{accountid}/payments/payments/{paymentid}" path="/accounting/account/{accountid}/payments/payments/{paymentid}" id="edbd8000-0ebe-4c9d-8e26-0f9350c14eeb"><con:settings/><con:parameters/><con:method name="GET" id="1741661b-3ea1-4a7c-9e1b-093bb5fe0b00" method="GET"><con:description>
Payment information</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>accountid</con:name><con:style>TEMPLATE</con:style><con:description>The external account number (int) or account ID Guid.</con:description></con:parameter><con:parameter required="true"><con:name>paymentid</con:name><con:style>TEMPLATE</con:style><con:description>The payment's GUID. Eg 75207 </con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:request name="Request 1" id="9b292462-a18f-4202-bbdb-7e95d2e9c1cc" mediaType="application/json"><con:settings/><con:parameters/></con:request></con:method></con:resource><con:resource name="/accounting/account/{accountid}/users/clients/{clientid}" path="/accounting/account/{accountid}/users/clients/{clientid}" id="9664653e-fabd-4e37-871f-7cacb7f18a75"><con:settings/><con:parameters/><con:method name="GET" id="2d81892a-356d-41d9-a6ac-87915a6d20d2" method="GET"><con:description>
Client information</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>accountid</con:name><con:style>TEMPLATE</con:style><con:description>The external account number (int) or account ID Guid.</con:description></con:parameter><con:parameter required="true"><con:name>clientid</con:name><con:style>TEMPLATE</con:style><con:description>The client's ID. Eg 93524 </con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:request name="Request 1" id="68b39560-500a-4042-82d5-5fa6644e3b48" mediaType="application/json"><con:settings/><con:parameters/></con:request></con:method></con:resource><con:resource name="/api.freshbooks.com/auth/oauth/token" path="/api.freshbooks.com/auth/oauth/token" id="f0687564-97ec-49d7-8d0d-306db0196bb8"><con:settings/><con:parameters/><con:method name="POST" id="d974dc00-6959-4007-9163-01f73d715d19" method="POST"><con:description>
Authentication of client</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>Api-Version</con:name><con:style>HEADER</con:style><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>content-type</con:name><con:style>HEADER</con:style><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:request name="Request 1" id="0a640c95-a538-4066-bac7-d759410bfd7b" mediaType="application/json" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/events/account/{accountid}/events/callbacks" path="/events/account/{accountid}/events/callbacks" id="42f341b1-ab1d-4a59-b0fe-1488a83f4060"><con:settings/><con:parameters><con:parameter><con:name>accountid</con:name><con:style>TEMPLATE</con:style></con:parameter></con:parameters><con:method name="GET" id="2c03c9dd-3617-4f60-9e91-ad20df42ca02" method="POST"><con:description>
Webhooks all callbacks events</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>accountid</con:name><con:style>TEMPLATE</con:style><con:description>The external account number (int) or account ID Guid.</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="d4ac3587-9e60-4716-8a2d-2c36f8b9a3d8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://HARSHALBENDALE.local:8089/</con:endpoint><con:request/><con:originalUri>http://HARSHALBENDALE.local/events/account//events/callbacks</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="POST" id="4c0c7fe9-f6a7-4f97-8a11-55089d7bb349" method="POST"><con:description>
Webhooks callback event</con:description><con:settings/><con:parameters><con:parameter required="false"><con:name>accountid</con:name><con:style>TEMPLATE</con:style><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="317ff85d-c122-4827-b026-6ab91f242057" mediaType="application/x-www-form-urlencoded" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://HARSHALBENDALE.local:8089/</con:endpoint><con:request>{
    "response": {
        "result": {
            "callback": {
                "callbackid": 745924,
                "verified": false,
                "uri": "http://yourserver.com/webhooks/ready",
                "event": "invoice.create",
                "updated_at": "2019-04-29T02:08:31Z"
            }
        }
    }
}</con:request><con:originalUri>http://HARSHALBENDALE.local/events/account/ao4ZZY/events/callbacks</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="accountid" value="ao4ZZY" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>accountid</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="/events/account/{accountid}/events/callbacks/{callbackid}" path="/events/account/{accountid}/events/callbacks/{callbackid}" id="33cd17d4-2542-4155-9587-b1dede371798"><con:settings/><con:parameters/><con:method name="PUT" id="fa84ade5-b333-44f3-ae99-8fcaffd6a538" method="PUT"><con:description>
Webhooks verify event</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>accountid</con:name><con:style>TEMPLATE</con:style><con:description>The external account number (int) or account ID Guid.</con:description></con:parameter><con:parameter required="true"><con:name>callbackid</con:name><con:style>TEMPLATE</con:style><con:description>The callbackid's ID. Eg 3242 </con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="d1830f21-d794-4384-8430-c7aaff98d797" mediaType="application/json"><con:settings/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite id="6d4ce630-b3f0-4388-9c76-805c16c84bcb" name="TestSuite 1"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="8c8a0ab2-5de9-473c-848e-f291148916c8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase 1" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="1531076d-dc95-459e-ab75-24080f8d7f93" port="8089" path="/" host="HARSHALBENDALE.local" name="freshbooksmock" docroot=""><con:settings/><con:properties/><con:restMockAction name="/accounting/account//estimates/estimates/" method="GET" resourcePath="/accounting/account//estimates/estimates/" id="e7f6bb51-ff2f-482a-8b08-1f0087d43405"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="estimatedetails" id="eb5d1dec-0994-4ec9-a9e8-709c0e08ff44" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "response": {
        "result": {
            "estimates": [
                {
                    "accepted": true,
                    "accounting_systemid": "ao4ZZY",
                    "address": "",
                    "amount": {
                        "amount": "200.00",
                        "code": "INR"
                    },
                    "city": "",
                    "code": "",
                    "country": "",
                    "create_date": "2019-04-16",
                    "created_at": "2019-04-16 04:01:44",
                    "currency_code": "INR",
                    "current_organization": "app",
                    "customerid": 25326,
                    "description": "",
                    "discount_total": {
                        "amount": "0.00",
                        "code": "INR"
                    },
                    "discount_value": "0",
                    "display_status": "sent",
                    "estimate_number": "0000001",
                    "estimateid": 1276,
                    "ext_archive": 0,
                    "fname": "test",
                    "id": 1276,
                    "invoiced": true,
                    "language": "en",
                    "lname": "testdemo",
                    "notes": "",
                    "organization": "app",
                    "ownerid": 1,
                    "po_number": null,
                    "province": "",
                    "reply_status": null,
                    "require_client_signature": false,
                    "rich_proposal": false,
                    "sentid": 1,
                    "status": 6,
                    "street": "",
                    "street2": "",
                    "template": "clean-grouped",
                    "terms": null,
                    "ui_status": "invoiced",
                    "updated": "2019-04-16 04:10:20",
                    "vat_name": null,
                    "vat_number": null,
                    "vis_state": 0
                }
            ],
            "page": 1,
            "pages": 1,
            "per_page": 15,
            "total": 1
        }
    }
}</con:responseContent><con:header><con:name/><con:value/></con:header><con:header><con:name>estimatedetails</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="/accounting/account//invoices/invoices/" method="GET" resourcePath="/accounting/account//invoices/invoices/" id="83027a2c-6e96-4515-b670-5edf9a664e2c"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="invoicedetails" id="fb01ef8c-4ead-4a75-8009-cb782d14e0d0" httpResponseStatus="200"><con:settings/><con:responseContent>{
    "response": {
        "result": {
            "invoice": {
                "accountid": "ao4ZZY",
                "accounting_systemid": "ao4ZZY",
                "address": "",
                "amount": {
                    "amount": "10.00",
                    "code": "INR"
                },
                "auto_bill": false,
                "autobill_status": null,
                "basecampid": 0,
                "city": "City",
                "code": "411057",
                "country": "India",
                "create_date": "2019-04-16",
                "created_at": "2019-04-16 01:22:07",
                "currency_code": "INR",
                "current_organization": "Company Dummy",
                "customerid": 25222,
                "date_paid": null,
                "deposit_amount": null,
                "deposit_percentage": null,
                "deposit_status": "none",
                "description": "",
                "discount_description": null,
                "discount_total": {
                    "amount": "0.00",
                    "code": "INR"
                },
                "discount_value": "0",
                "display_status": "draft",
                "dispute_status": null,
                "due_date": "2019-05-16",
                "due_offset_days": 30,
                "estimateid": 0,
                "ext_archive": 0,
                "fname": "Test",
                "fulfillment_date": null,
                "generation_date": null,
                "gmail": false,
                "id": 19438,
                "invoice_number": "0000001",
                "invoiceid": 19438,
                "language": "en",
                "last_order_status": null,
                "lname": "Client",
                "notes": "",
                "organization": "Company Dummy",
                "outstanding": {
                    "amount": "10.00",
                    "code": "INR"
                },
                "ownerid": 1,
                "paid": {
                    "amount": "0.00",
                    "code": "INR"
                },
                "parent": 0,
                "payment_details": "",
                "payment_status": "unpaid",
                "po_number": null,
                "province": "State",
                "return_uri": null,
                "sentid": 1,
                "show_attachments": false,
                "status": 1,
                "street": "Street",
                "street2": "",
                "template": "clean-grouped",
                "terms": null,
                "updated": "2019-04-16 01:22:07",
                "v3_status": "draft",
                "vat_name": null,
                "vat_number": "",
                "vis_state": 0
            }
        }
    }
}</con:responseContent><con:header><con:name>invoicedetails</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="/accounting/account//payments/payments/" method="GET" resourcePath="/accounting/account//payments/payments/" id="a57b9c19-b712-489e-a7fd-525036c26816"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="payments" id="6d5c595f-bb82-410d-95a7-c41828573acf" httpResponseStatus="200"><con:settings/><con:responseContent>{
    "response": {
        "result": {
            "page": 1,
            "pages": 1,
            "payments": [
                {
                    "accounting_systemid": "ao4ZZY",
                    "amount": {
                        "amount": "200.00",
                        "code": "INR"
                    },
                    "clientid": 25326,
                    "creditid": null,
                    "date": "2019-04-16",
                    "from_credit": false,
                    "gateway": null,
                    "id": 5704,
                    "invoiceid": 19588,
                    "logid": 5704,
                    "note": "",
                    "orderid": null,
                    "overpaymentid": null,
                    "transactionid": null,
                    "type": "Check",
                    "updated": "2019-04-16 04:12:23",
                    "vis_state": 0
                },
                {
                    "accounting_systemid": "ao4ZZY",
                    "amount": {
                        "amount": "1000.00",
                        "code": "INR"
                    },
                    "clientid": 25222,
                    "creditid": null,
                    "date": "2019-04-16",
                    "from_credit": false,
                    "gateway": null,
                    "id": 5696,
                    "invoiceid": 19464,
                    "logid": 5696,
                    "note": "",
                    "orderid": null,
                    "overpaymentid": null,
                    "transactionid": null,
                    "type": "MASTERCARD",
                    "updated": "2019-04-16 03:00:40",
                    "vis_state": 0
                }
            ],
            "per_page": 15,
            "total": 2
        }
    }
}</con:responseContent><con:header><con:name>payments</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="/accounting/account//users/clients/" method="GET" resourcePath="/accounting/account//users/clients/" id="aab15be6-bb4e-47e7-843a-040a53815532"><con:settings/><con:defaultResponse>userdetails</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="userdetails" id="5a13daff-6a21-489c-9b27-b3c4a21f42ca" httpResponseStatus="200"><con:settings/><con:responseContent>{
    "response": {
        "id": 1996406,
        "profile": {
            "setup_complete": true,
            "first_name": "Appdirect",
            "last_name": "Company",
            "phone_number": null,
            "address": null,
            "professions": [
                {
                    "id": 2392068,
                    "business_id": 1932514,
                    "title": "Construction",
                    "company": "Appdirect Company",
                    "designation": null
                }
            ]
        },
        "first_name": "Appdirect",
        "last_name": "Company",
        "email": "harshal.bendale@appdirect.com",
        "language": "en",
        "confirmed_at": "2019-04-08T10:01:44Z",
        "created_at": "2019-04-08T10:01:24Z",
        "unconfirmed_email": null,
        "setup_complete": true,
        "phone_numbers": [
            {
                "title": "",
                "phone_number": null
            }
        ],
        "addresses": [
            null
        ],
        "profession": {
            "id": 2392068,
            "business_id": 1932514,
            "title": "Construction",
            "company": "Appdirect Company",
            "designation": null
        },
        "links": {
            "me": "/service/auth/api/v1/users?id=1996406",
            "roles": "/service/auth/api/v1/users/role/1996406"
        },
        "permissions": {
            "ao4ZZY": {
                "advanced_accounting.access": true,
                "attachments.access": true,
                "business_accountant.limit": 10,
                "client.limit": -1,
                "proposals_candidate.access": true,
                "rich_proposals.access": true,
                "staff.limit": -1,
                "BetaHeliosAsyncExpenses.access": true,
                "beta_mobile_create_expense_subcategory.access": true,
                "ios_beta_zendesk_widget.access": true,
                "mobile_receipt_rebilling.access": true,
                "helios_pushnotifications.beta.access": true,
                "ios_beta_payment_schedules.access": true,
                "helios_rebill_time.access": true,
                "esignatures.access": true,
                "helios_dashboard.access": true,
                "helios_late_fee_reminder.beta.access": true,
                "helios_bulk_actions_invoices.beta.access": true,
                "auto_bank_import.access": true,
                "helios_virtual_terminal.beta.access": true,
                "helios_expense_rebilling.beta.access": true,
                "helios_company_taxes.beta.access": true,
                "helios_invoice_archive.beta.access": true,
                "accountant_invite.access": true,
                "premium_contractor_role.access": true,
                "helios_sync_throttle.beta.access": true,
                "BankReconciliation.access": true,
                "helios_push_resource_to_use_execute.beta.access": true,
                "new_time_tracking.access": true,
                "bank_rec_smart_match.access": true,
                "balance_sheet.access": true,
                "invoice_v2_search.access": true,
                "import_items_csv.access": true,
                "export_clients_csv.access": true,
                "helios_virtual_terminal_tutorial.beta.access": true
            }
        },
        "groups": [
            {
                "id": 6365624,
                "group_id": 4880082,
                "role": "owner",
                "identity_id": 1996406,
                "business_id": 1932514,
                "active": true
            }
        ],
        "subscription_statuses": {
            "ao4ZZY": "active_trial"
        },
        "integrations": {},
        "business_memberships": [
            {
                "id": 6365624,
                "role": "owner",
                "unacknowledged_change": false,
                "fasttrack_token": "eyJhbGciOiJIUzI1NiJ9.eyJmYXN0dHJhY2tfaWRlbnRpdHlfaWQiOiIxOTk2NDA2IiwiZmFzdHRyYWNrX3N5c3RlbV9pZCI6IjQyMTE2NjIiLCJjcmVhdGVkX2F0IjoiMjAxOS0wNC0yOVQwNToyOTo0NSswMDowMCJ9.UJCnE2jkHoEHRA41G3I_dMNX63yAJlY3PblpsxS93FY",
                "business": {
                    "id": 1932514,
                    "name": "Appdirect Company",
                    "account_id": "ao4ZZY",
                    "date_format": "mm/dd/yyyy",
                    "address": {
                        "id": 2374218,
                        "street": "",
                        "city": "",
                        "province": "",
                        "country": "India",
                        "postal_code": ""
                    },
                    "phone_number": {
                        "id": 923634,
                        "phone_number": "98222222222"
                    },
                    "business_clients": []
                }
            }
        ],
        "identity_origin": "magnum",
        "roles": [
            {
                "id": 2088004,
                "role": "admin",
                "systemid": 4211662,
                "userid": 1,
                "created_at": "2019-04-08T10:01:24Z",
                "links": {
                    "destroy": "/service/auth/api/v1/users/role/2088004"
                },
                "accountid": "ao4ZZY"
            }
        ]
    }
}</con:responseContent><con:header><con:name>userdetails</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="/api.freshbooks.com/auth/oauth/token" method="POST" resourcePath="/api.freshbooks.com/auth/oauth/token" id="66da2331-c337-4aeb-b7e1-541c20487cce"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="7cfc8a00-cc70-4252-a3a0-e6d0f4d0fc6d" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/events/account//events/callbacks" method="GET" resourcePath="/events/account//events/callbacks" id="71e28c9a-36e5-4ea1-8458-330b47ebfecc"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="callbackwebhook" id="af804035-f22e-4c17-a397-2f3286942575" httpResponseStatus="200"><con:settings/><con:responseContent>{
    "response": {
        "result": {
            "callbacks": [
                {
                    "callbackid": 745748,
                    "verified": false,
                    "uri": "http://yourserver.com/webhooks/ready",
                    "event": "invoice.create",
                    "updated_at": "2019-04-24T05:14:58Z"
                },
                {
                    "callbackid": 745750,
                    "verified": false,
                    "uri": "http://yourserver.com/webhooks/ready",
                    "event": "invoice.create",
                    "updated_at": "2019-04-24T05:32:33Z"
                },
                {
                    "callbackid": 745752,
                    "verified": false,
                    "uri": "http://yourserver.com/webhooks/ready",
                    "event": "invoice.create",
                    "updated_at": "2019-04-24T05:32:36Z"
                },
                {
                    "callbackid": 745762,
                    "verified": false,
                    "uri": "http://yourserver.com/webhooks/ready",
                    "event": "invoice.create",
                    "updated_at": "2019-04-24T07:28:11Z"
                },
                {
                    "callbackid": 745780,
                    "verified": false,
                    "uri": "http://yourserver.com/webhooks/ready",
                    "event": "invoice.create",
                    "updated_at": "2019-04-25T00:46:45Z"
                },
                {
                    "callbackid": 745782,
                    "verified": false,
                    "uri": "http://yourserver.com/webhooks/ready",
                    "event": "invoice.create",
                    "updated_at": "2019-04-25T03:06:59Z"
                },
                {
                    "callbackid": 745784,
                    "verified": false,
                    "uri": "http://yourserver.com/webhooks/ready",
                    "event": "invoice.create",
                    "updated_at": "2019-04-25T05:26:27Z"
                },
                {
                    "callbackid": 745786,
                    "verified": false,
                    "uri": "http://yourserver.com/webhooks/ready",
                    "event": "invoice.create",
                    "updated_at": "2019-04-25T05:27:45Z"
                },
                {
                    "callbackid": 745788,
                    "verified": false,
                    "uri": "http://yourserver.com/webhooks/ready",
                    "event": "invoice.create",
                    "updated_at": "2019-04-25T05:37:39Z"
                },
                {
                    "callbackid": 745848,
                    "verified": false,
                    "uri": "http://yourserver.com/webhooks/ready",
                    "event": "invoice.create",
                    "updated_at": "2019-04-26T01:01:48Z"
                }
            ],
            "page": 1,
            "pages": 1,
            "per_page": 15,
            "total": 10
        }
    }
}</con:responseContent><con:header><con:name>webhooks</con:name><con:value/></con:header></con:response></con:restMockAction><con:restMockAction name="/events/account//events/callbacks" method="POST" resourcePath="/events/account//events/callbacks" id="2dc831f6-e13b-46a9-8947-bb2dab97f20a"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="callback webhook post" id="92b8fb16-428f-4ce7-a208-052df0693959" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "response": {
        "result": {
            "callback": {
                "callbackid": 745924,
                "verified": false,
                "uri": "http://yourserver.com/webhooks/ready",
                "event": "invoice.create",
                "updated_at": "2019-04-29T02:08:31Z"
            }
        }
    }
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/events/account//events/callbacks/" method="PUT" resourcePath="/events/account//events/callbacks/" id="4664350b-7b14-4749-b474-f9c20d61fad7"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="58cf44eb-7043-472e-960e-eeff7c191866" httpResponseStatus="200"><con:settings/><con:responseContent>{
    "response": {
        "result": {
            "callback": {
                "callbackid": 745748,
                "verified": false,
                "uri": "http://yourserver.com/webhooks/ready",
                "event": "invoice.create",
                "updated_at": "2019-04-24T05:14:58Z"
            }
        }
    }
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>